{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/hooks/useExchangeRates.ts"],"sourcesContent":["'use client'\n\nimport { useState, useEffect, useCallback } from 'react'\nimport { io, Socket } from 'socket.io-client'\nimport { ExchangeRate, ChartData } from '@/types'\n\ninterface UseExchangeRatesProps {\n  selectedCurrencies: string[]\n  thresholdKRW: number\n}\n\ninterface UseExchangeRatesReturn {\n  exchangeRates: ExchangeRate[]\n  chartData: ChartData[]\n  isConnected: boolean\n  error: string | null\n}\n\n// 더미 데이터\nconst DUMMY_EXCHANGE_RATES: ExchangeRate[] = [\n  {\n    currency: 'USD',\n    currencyName: 'US Dollar',\n    rate: 1340.50,\n    previousRate: 1338.20,\n    change: 2.30,\n    changePercent: 0.17,\n    timestamp: new Date(),\n    isPositive: true\n  },\n  {\n    currency: 'EUR',\n    currencyName: 'Euro',\n    rate: 1456.80,\n    previousRate: 1459.10,\n    change: -2.30,\n    changePercent: -0.16,\n    timestamp: new Date(),\n    isPositive: false\n  },\n  {\n    currency: 'JPY',\n    currencyName: 'Japanese Yen',\n    rate: 9.12,\n    previousRate: 9.08,\n    change: 0.04,\n    changePercent: 0.44,\n    timestamp: new Date(),\n    isPositive: true\n  },\n  {\n    currency: 'CNY',\n    currencyName: 'Chinese Yuan',\n    rate: 183.45,\n    previousRate: 184.20,\n    change: -0.75,\n    changePercent: -0.41,\n    timestamp: new Date(),\n    isPositive: false\n  }\n]\n\nconst DUMMY_CHART_DATA: ChartData[] = [\n  { timestamp: Date.now() - 300000, rate: 1338.20 },\n  { timestamp: Date.now() - 240000, rate: 1339.10 },\n  { timestamp: Date.now() - 180000, rate: 1340.50 },\n  { timestamp: Date.now() - 120000, rate: 1339.80 },\n  { timestamp: Date.now() - 60000, rate: 1340.20 },\n  { timestamp: Date.now(), rate: 1340.50 }\n]\n\nexport function useExchangeRates({\n  selectedCurrencies,\n  thresholdKRW\n}: UseExchangeRatesProps): UseExchangeRatesReturn {\n  const [socket, setSocket] = useState<Socket | null>(null)\n  const [exchangeRates, setExchangeRates] = useState<ExchangeRate[]>(\n    DUMMY_EXCHANGE_RATES.filter(rate => selectedCurrencies.includes(rate.currency))\n  )\n  const [chartData, setChartData] = useState<ChartData[]>(DUMMY_CHART_DATA)\n  const [isConnected, setIsConnected] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (socket?.connected) return\n\n    const newSocket = io(process.env.NEXT_PUBLIC_SOCKET_URL || 'http://localhost:3001', {\n      transports: ['websocket'],\n      upgrade: false,\n    })\n\n    newSocket.on('connect', () => {\n      console.log('Connected to server')\n      setIsConnected(true)\n      setError(null)\n      \n      // Subscribe to currencies\n      newSocket.emit('subscribe', { \n        currencies: selectedCurrencies,\n        thresholdKRW \n      })\n    })\n\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from server')\n      setIsConnected(false)\n    })\n\n    newSocket.on('exchangeRateUpdate', (data: ExchangeRate) => {\n      setExchangeRates(prev => {\n        const existingIndex = prev.findIndex(rate => rate.currency === data.currency)\n        if (existingIndex >= 0) {\n          const updated = [...prev]\n          updated[existingIndex] = data\n          return updated\n        }\n        return [...prev, data]\n      })\n    })\n\n    newSocket.on('chartDataUpdate', (data: { currency: string; chartData: ChartData[] }) => {\n      setChartData(data.chartData)\n    })\n\n    newSocket.on('connect_error', (err) => {\n      console.error('Connection error:', err)\n      setError('서버에 연결할 수 없습니다')\n      setIsConnected(false)\n    })\n\n    setSocket(newSocket)\n\n    return () => {\n      newSocket.disconnect()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (socket && isConnected) {\n      socket.emit('subscribe', { \n        currencies: selectedCurrencies,\n        thresholdKRW \n      })\n    }\n  }, [selectedCurrencies, thresholdKRW, socket, isConnected])\n\n  // selectedCurrencies가 변경될 때 더미 데이터 업데이트\n  useEffect(() => {\n    if (!isConnected) {\n      setExchangeRates(\n        DUMMY_EXCHANGE_RATES.filter(rate => selectedCurrencies.includes(rate.currency))\n      )\n    }\n  }, [selectedCurrencies, isConnected])\n\n  return {\n    exchangeRates,\n    chartData,\n    isConnected,\n    error\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/hooks/useUserSettings.ts"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport { UserSettings } from '@/types'\n\nconst DEFAULT_SETTINGS: UserSettings = {\n  selectedCurrencies: ['USD', 'EUR', 'JPY', 'CNY'],\n  thresholdKRW: 5,\n  refreshInterval: 5000,\n  chartCurrency: 'USD',\n  currencyDisplaySettings: {\n    USD: 1,\n    EUR: 1,\n    JPY: 100,\n    CNY: 1,\n    GBP: 1,\n    AUD: 1,\n    CAD: 1,\n    CHF: 1\n  }\n}\n\ninterface UseUserSettingsReturn {\n  settings: UserSettings\n  updateSettings: (newSettings: UserSettings) => void\n  saveSettings: () => void\n}\n\nexport function useUserSettings(): UseUserSettingsReturn {\n  const [settings, setSettings] = useState<UserSettings>(DEFAULT_SETTINGS)\n\n  useEffect(() => {\n    // Load settings from localStorage on mount\n    const savedSettings = localStorage.getItem('currencyDashboardSettings')\n    if (savedSettings) {\n      try {\n        const parsed = JSON.parse(savedSettings)\n        setSettings({ ...DEFAULT_SETTINGS, ...parsed })\n      } catch (error) {\n        console.error('Failed to parse saved settings:', error)\n      }\n    }\n  }, [])\n\n  const updateSettings = (newSettings: UserSettings) => {\n    setSettings(newSettings)\n  }\n\n  const saveSettings = () => {\n    localStorage.setItem('currencyDashboardSettings', JSON.stringify(settings))\n  }\n\n  return {\n    settings,\n    updateSettings,\n    saveSettings\n  }\n}"],"names":[],"mappings":";;;AAEA;AAFA;;AAKA,MAAM,mBAAiC;IACrC,oBAAoB;QAAC;QAAO;QAAO;QAAO;KAAM;IAChD,cAAc;IACd,iBAAiB;IACjB,eAAe;IACf,yBAAyB;QACvB,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;IACP;AACF;AAQO,SAAS;IACd,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAgB;IAEvD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,2CAA2C;QAC3C,MAAM,gBAAgB,aAAa,OAAO,CAAC;QAC3C,IAAI,eAAe;YACjB,IAAI;gBACF,MAAM,SAAS,KAAK,KAAK,CAAC;gBAC1B,YAAY;oBAAE,GAAG,gBAAgB;oBAAE,GAAG,MAAM;gBAAC;YAC/C,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,mCAAmC;YACnD;QACF;IACF,GAAG,EAAE;IAEL,MAAM,iBAAiB,CAAC;QACtB,YAAY;IACd;IAEA,MAAM,eAAe;QACnB,aAAa,OAAO,CAAC,6BAA6B,KAAK,SAAS,CAAC;IACnE;IAEA,OAAO;QACL;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/types/index.ts"],"sourcesContent":["export interface ExchangeRate {\n  currency: string\n  currencyName: string\n  rate: number\n  previousRate: number\n  change: number\n  changePercent: number\n  timestamp: Date\n  isPositive: boolean\n}\n\nexport interface CurrencyConfig {\n  code: string\n  name: string\n  symbol: string\n  flag: string\n}\n\nexport interface CurrencyDisplaySettings {\n  [currencyCode: string]: number // Foreign currency amount to display (e.g., USD: 1, JPY: 100)\n}\n\nexport interface UserSettings {\n  thresholdKRW: number\n  selectedCurrencies: string[]\n  refreshInterval: number\n  chartCurrency: string\n  currencyDisplaySettings: CurrencyDisplaySettings\n}\n\nexport interface ChartData {\n  timestamp: number\n  rate: number\n}\n\nexport interface WebSocketMessage {\n  type: 'EXCHANGE_RATE_UPDATE' | 'CONNECTION_STATUS' | 'ERROR'\n  data: unknown\n  timestamp: Date\n}\n\nexport const SUPPORTED_CURRENCIES: CurrencyConfig[] = [\n  { code: 'USD', name: 'US Dollar', symbol: '$', flag: '🇺🇸' },\n  { code: 'EUR', name: 'Euro', symbol: '€', flag: '🇪🇺' },\n  { code: 'JPY', name: 'Japanese Yen', symbol: '¥', flag: '🇯🇵' },\n  { code: 'CNY', name: 'Chinese Yuan', symbol: '¥', flag: '🇨🇳' },\n  { code: 'GBP', name: 'British Pound', symbol: '£', flag: '🇬🇧' },\n  { code: 'AUD', name: 'Australian Dollar', symbol: 'A$', flag: '🇦🇺' },\n  { code: 'CAD', name: 'Canadian Dollar', symbol: 'C$', flag: '🇨🇦' },\n  { code: 'CHF', name: 'Swiss Franc', symbol: 'Fr', flag: '🇨🇭' },\n]"],"names":[],"mappings":";;;AAyCO,MAAM,uBAAyC;IACpD;QAAE,MAAM;QAAO,MAAM;QAAa,QAAQ;QAAK,MAAM;IAAO;IAC5D;QAAE,MAAM;QAAO,MAAM;QAAQ,QAAQ;QAAK,MAAM;IAAO;IACvD;QAAE,MAAM;QAAO,MAAM;QAAgB,QAAQ;QAAK,MAAM;IAAO;IAC/D;QAAE,MAAM;QAAO,MAAM;QAAgB,QAAQ;QAAK,MAAM;IAAO;IAC/D;QAAE,MAAM;QAAO,MAAM;QAAiB,QAAQ;QAAK,MAAM;IAAO;IAChE;QAAE,MAAM;QAAO,MAAM;QAAqB,QAAQ;QAAM,MAAM;IAAO;IACrE;QAAE,MAAM;QAAO,MAAM;QAAmB,QAAQ;QAAM,MAAM;IAAO;IACnE;QAAE,MAAM;QAAO,MAAM;QAAe,QAAQ;QAAM,MAAM;IAAO;CAChE","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatExchangeRate(rate: number): string {\n  return rate.toLocaleString('ko-KR', { \n    minimumFractionDigits: 2, \n    maximumFractionDigits: 2 \n  })\n}\n\nexport function calculateChange(currentRate: number, previousRate: number) {\n  const change = currentRate - previousRate\n  const changePercent = (change / previousRate) * 100\n  const isPositive = change > 0\n\n  return {\n    change,\n    changePercent,\n    isPositive\n  }\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS,mBAAmB,IAAY;IAC7C,OAAO,KAAK,cAAc,CAAC,SAAS;QAClC,uBAAuB;QACvB,uBAAuB;IACzB;AACF;AAEO,SAAS,gBAAgB,WAAmB,EAAE,YAAoB;IACvE,MAAM,SAAS,cAAc;IAC7B,MAAM,gBAAgB,AAAC,SAAS,eAAgB;IAChD,MAAM,aAAa,SAAS;IAE5B,OAAO;QACL;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/components/ui/Card.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter }"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;;;;AAEA,MAAM,qBAAO,qMAAA,CAAA,aAAgB,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,uIAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,qMAAA,CAAA,aAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,uIAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAErF,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,qMAAA,CAAA,aAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,uIAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,qMAAA,CAAA,aAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,uIAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,qMAAA,CAAA,aAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,uIAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,qMAAA,CAAA,aAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,uIAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAAa,GAAG,KAAK;;;;;;AAElF,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 521, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/components/dashboard/CurrencyCard.tsx"],"sourcesContent":["\"use client\";\n\nimport { ExchangeRate, SUPPORTED_CURRENCIES } from \"@/types\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/Card\";\nimport { calculateChange } from \"@/lib/utils\";\nimport { TrendingUp, TrendingDown, Minus } from \"lucide-react\";\n\ninterface CurrencyCardProps {\n  exchangeRate: ExchangeRate;\n}\n\nexport function CurrencyCard({ exchangeRate }: CurrencyCardProps) {\n  const currency = SUPPORTED_CURRENCIES.find(\n    (c) => c.code === exchangeRate.currency\n  );\n  const { change, changePercent, isPositive } = calculateChange(\n    exchangeRate.rate,\n    exchangeRate.previousRate\n  );\n\n  const getChangeColor = () => {\n    if (change === 0) return \"text-gray-500\";\n    return isPositive\n      ? \"text-green-600 dark:text-green-400\"\n      : \"text-red-600 dark:text-red-400\";\n  };\n\n  const getChangeIcon = () => {\n    if (change === 0) return <Minus className=\"w-4 h-4\" />;\n    return isPositive ? (\n      <TrendingUp className=\"w-4 h-4\" />\n    ) : (\n      <TrendingDown className=\"w-4 h-4\" />\n    );\n  };\n\n  const formatTime = (date: Date) => {\n    return new Intl.DateTimeFormat(\"ko-KR\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n    }).format(date);\n  };\n\n  const displayChange = change;\n\n  return (\n    <Card className=\"border-0 shadow-lg hover:shadow-xl transition-shadow duration-300 bg-white dark:bg-gray-800\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center justify-between text-base\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-2xl\">{currency?.flag}</span>\n            <div>\n              <div className=\"font-semibold\">{currency?.code}</div>\n              <div className=\"text-sm text-gray-500 font-normal\">\n                {currency?.name}\n              </div>\n            </div>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2\">\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            1{currency?.code} = ₩{exchangeRate.rate.toFixed(2)}\n          </div>\n\n          <div\n            className={`flex items-center gap-1 text-sm ${getChangeColor()}`}\n          >\n            {getChangeIcon()}\n            <span>\n              {isPositive ? \"+\" : \"\"}₩{Math.abs(displayChange).toFixed(2)}\n            </span>\n            <span>\n              ({isPositive ? \"+\" : \"\"}\n              {changePercent.toFixed(2)}%)\n            </span>\n          </div>\n\n          <div className=\"text-xs text-gray-400\">\n            Last updated: {formatTime(exchangeRate.timestamp)}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AALA;;;;;;AAWO,SAAS,aAAa,EAAE,YAAY,EAAqB;IAC9D,MAAM,WAAW,yIAAA,CAAA,uBAAoB,CAAC,IAAI,CACxC,CAAC,IAAM,EAAE,IAAI,KAAK,aAAa,QAAQ;IAEzC,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,kBAAe,AAAD,EAC1D,aAAa,IAAI,EACjB,aAAa,YAAY;IAG3B,MAAM,iBAAiB;QACrB,IAAI,WAAW,GAAG,OAAO;QACzB,OAAO,aACH,uCACA;IACN;IAEA,MAAM,gBAAgB;QACpB,IAAI,WAAW,GAAG,qBAAO,8OAAC,oMAAA,CAAA,QAAK;YAAC,WAAU;;;;;;QAC1C,OAAO,2BACL,8OAAC,kNAAA,CAAA,aAAU;YAAC,WAAU;;;;;iCAEtB,8OAAC,sNAAA,CAAA,eAAY;YAAC,WAAU;;;;;;IAE5B;IAEA,MAAM,aAAa,CAAC;QAClB,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;YACtC,MAAM;YACN,QAAQ;YACR,QAAQ;QACV,GAAG,MAAM,CAAC;IACZ;IAEA,MAAM,gBAAgB;IAEtB,qBACE,8OAAC,oJAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,oJAAA,CAAA,aAAU;gBAAC,WAAU;0BACpB,cAAA,8OAAC,oJAAA,CAAA,YAAS;oBAAC,WAAU;8BACnB,cAAA,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;0CAAY,UAAU;;;;;;0CACtC,8OAAC;;kDACC,8OAAC;wCAAI,WAAU;kDAAiB,UAAU;;;;;;kDAC1C,8OAAC;wCAAI,WAAU;kDACZ,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAMrB,8OAAC,oJAAA,CAAA,cAAW;0BACV,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;gCAAmD;gCAC9D,UAAU;gCAAK;gCAAK,aAAa,IAAI,CAAC,OAAO,CAAC;;;;;;;sCAGlD,8OAAC;4BACC,WAAW,CAAC,gCAAgC,EAAE,kBAAkB;;gCAE/D;8CACD,8OAAC;;wCACE,aAAa,MAAM;wCAAG;wCAAE,KAAK,GAAG,CAAC,eAAe,OAAO,CAAC;;;;;;;8CAE3D,8OAAC;;wCAAK;wCACF,aAAa,MAAM;wCACpB,cAAc,OAAO,CAAC;wCAAG;;;;;;;;;;;;;sCAI9B,8OAAC;4BAAI,WAAU;;gCAAwB;gCACtB,WAAW,aAAa,SAAS;;;;;;;;;;;;;;;;;;;;;;;;AAM5D","debugId":null}},
    {"offset": {"line": 715, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/components/dashboard/ExchangeRateChart.tsx"],"sourcesContent":["'use client'\n\nimport { useEffect, useState } from 'react'\nimport dynamic from 'next/dynamic'\nimport { ApexOptions } from 'apexcharts'\nimport { ChartData } from '@/types'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'\n\nconst Chart = dynamic(() => import('react-apexcharts'), { ssr: false })\n\ninterface ExchangeRateChartProps {\n  currency: string\n  data: ChartData[]\n  isRealTime?: boolean\n  foreignAmount: number\n}\n\nexport function ExchangeRateChart({ \n  currency, \n  data, \n  isRealTime = false,\n  foreignAmount\n}: ExchangeRateChartProps) {\n  const [chartOptions, setChartOptions] = useState<ApexOptions>({\n    chart: {\n      type: 'line',\n      height: 350,\n      animations: {\n        enabled: isRealTime,\n        dynamicAnimation: {\n          enabled: isRealTime,\n          speed: 1000\n        }\n      },\n      toolbar: {\n        show: false\n      },\n      zoom: {\n        enabled: false\n      }\n    },\n    stroke: {\n      curve: 'smooth',\n      width: 2\n    },\n    xaxis: {\n      type: 'datetime',\n      labels: {\n        format: 'HH:mm:ss'\n      }\n    },\n    yaxis: {\n      labels: {\n        formatter: (value) => `₩${value.toFixed(2)}`\n      }\n    },\n    tooltip: {\n      x: {\n        format: 'dd/MM/yy HH:mm:ss'\n      },\n      y: {\n        formatter: (value) => `₩${value.toFixed(2)}`\n      }\n    },\n    colors: ['#3B82F6'],\n    grid: {\n      show: true,\n      borderColor: '#E5E7EB',\n      strokeDashArray: 0,\n      position: 'back'\n    },\n    theme: {\n      mode: 'light'\n    }\n  })\n\n  const [series, setSeries] = useState([\n    {\n      name: `${foreignAmount}${currency} = KRW`,\n      data: data.map(item => [item.timestamp, item.rate * foreignAmount])\n    }\n  ])\n\n  useEffect(() => {\n    setSeries([\n      {\n        name: `${foreignAmount}${currency} = KRW`,\n        data: data.map(item => [item.timestamp, item.rate * foreignAmount])\n      }\n    ])\n  }, [data, currency, foreignAmount])\n\n  useEffect(() => {\n    const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches\n    \n    setChartOptions(prev => ({\n      ...prev,\n      theme: {\n        mode: isDarkMode ? 'dark' : 'light'\n      },\n      grid: {\n        ...prev.grid,\n        borderColor: isDarkMode ? '#374151' : '#E5E7EB'\n      }\n    }))\n  }, [])\n\n  return (\n    <Card className=\"border-0 shadow-lg bg-white dark:bg-gray-800\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>{foreignAmount}{currency} = KRW Chart</span>\n          {isRealTime && (\n            <div className=\"flex items-center gap-2 text-sm text-green-600\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n              Live\n            </div>\n          )}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[350px]\">\n          {typeof window !== 'undefined' && (\n            <Chart\n              options={chartOptions}\n              series={series}\n              type=\"line\"\n              height={350}\n            />\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}"],"names":[],"mappings":";;;;AAEA;AACA;AAGA;;AANA;;;;;AAQA,MAAM,QAAQ,CAAA,GAAA,+JAAA,CAAA,UAAO,AAAD;;;;;;IAAsC,KAAK;;AASxD,SAAS,kBAAkB,EAChC,QAAQ,EACR,IAAI,EACJ,aAAa,KAAK,EAClB,aAAa,EACU;IACvB,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;QAC5D,OAAO;YACL,MAAM;YACN,QAAQ;YACR,YAAY;gBACV,SAAS;gBACT,kBAAkB;oBAChB,SAAS;oBACT,OAAO;gBACT;YACF;YACA,SAAS;gBACP,MAAM;YACR;YACA,MAAM;gBACJ,SAAS;YACX;QACF;QACA,QAAQ;YACN,OAAO;YACP,OAAO;QACT;QACA,OAAO;YACL,MAAM;YACN,QAAQ;gBACN,QAAQ;YACV;QACF;QACA,OAAO;YACL,QAAQ;gBACN,WAAW,CAAC,QAAU,CAAC,CAAC,EAAE,MAAM,OAAO,CAAC,IAAI;YAC9C;QACF;QACA,SAAS;YACP,GAAG;gBACD,QAAQ;YACV;YACA,GAAG;gBACD,WAAW,CAAC,QAAU,CAAC,CAAC,EAAE,MAAM,OAAO,CAAC,IAAI;YAC9C;QACF;QACA,QAAQ;YAAC;SAAU;QACnB,MAAM;YACJ,MAAM;YACN,aAAa;YACb,iBAAiB;YACjB,UAAU;QACZ;QACA,OAAO;YACL,MAAM;QACR;IACF;IAEA,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QACnC;YACE,MAAM,GAAG,gBAAgB,SAAS,MAAM,CAAC;YACzC,MAAM,KAAK,GAAG,CAAC,CAAA,OAAQ;oBAAC,KAAK,SAAS;oBAAE,KAAK,IAAI,GAAG;iBAAc;QACpE;KACD;IAED,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,UAAU;YACR;gBACE,MAAM,GAAG,gBAAgB,SAAS,MAAM,CAAC;gBACzC,MAAM,KAAK,GAAG,CAAC,CAAA,OAAQ;wBAAC,KAAK,SAAS;wBAAE,KAAK,IAAI,GAAG;qBAAc;YACpE;SACD;IACH,GAAG;QAAC;QAAM;QAAU;KAAc;IAElC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,aAAa,OAAO,UAAU,CAAC,gCAAgC,OAAO;QAE5E,gBAAgB,CAAA,OAAQ,CAAC;gBACvB,GAAG,IAAI;gBACP,OAAO;oBACL,MAAM,aAAa,SAAS;gBAC9B;gBACA,MAAM;oBACJ,GAAG,KAAK,IAAI;oBACZ,aAAa,aAAa,YAAY;gBACxC;YACF,CAAC;IACH,GAAG,EAAE;IAEL,qBACE,8OAAC,oJAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,oJAAA,CAAA,aAAU;0BACT,cAAA,8OAAC,oJAAA,CAAA,YAAS;oBAAC,WAAU;;sCACnB,8OAAC;;gCAAM;gCAAe;gCAAS;;;;;;;wBAC9B,4BACC,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;;;;;;gCAAoD;;;;;;;;;;;;;;;;;;0BAM3E,8OAAC,oJAAA,CAAA,cAAW;0BACV,cAAA,8OAAC;oBAAI,WAAU;8BACZ,gBAAkB,6BACjB,8OAAC;wBACC,SAAS;wBACT,QAAQ;wBACR,MAAK;wBACL,QAAQ;;;;;;;;;;;;;;;;;;;;;;AAOtB","debugId":null}},
    {"offset": {"line": 908, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/components/ui/Button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-blue-600 text-white shadow-lg hover:bg-blue-700 hover:shadow-xl\",\n        destructive:\n          \"bg-red-600 text-white shadow-lg hover:bg-red-700 hover:shadow-xl\",\n        outline:\n          \"bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 shadow-lg hover:shadow-xl hover:bg-gray-50 dark:hover:bg-gray-700 border-0\",\n        secondary:\n          \"bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white shadow-lg hover:bg-gray-200 dark:hover:bg-gray-600 hover:shadow-xl\",\n        ghost: \"hover:bg-gray-100 dark:hover:bg-gray-800 shadow-sm hover:shadow-md\",\n        link: \"text-blue-600 underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,mVACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAOF,MAAM,uBAAS,qMAAA,CAAA,aAAgB,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IACvC,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,uIAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 963, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/components/dashboard/CurrencyConverter.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useMemo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'\nimport { Button } from '@/components/ui/Button'\nimport { ExchangeRate, SUPPORTED_CURRENCIES } from '@/types'\nimport { ArrowLeftRight, Calculator } from 'lucide-react'\n\ninterface CurrencyConverterProps {\n  exchangeRates: ExchangeRate[]\n}\n\nexport function CurrencyConverter({ exchangeRates }: CurrencyConverterProps) {\n  const [amount, setAmount] = useState<string>('100000')\n  const [fromCurrency, setFromCurrency] = useState<string>('KRW')\n  const [toCurrency, setToCurrency] = useState<string>('USD')\n\n  const exchangeRateMap = useMemo(() => {\n    const map: { [key: string]: number } = { KRW: 1 }\n    exchangeRates.forEach(rate => {\n      map[rate.currency] = rate.rate\n    })\n    return map\n  }, [exchangeRates])\n\n  const convertAmount = () => {\n    const numAmount = parseFloat(amount) || 0\n    if (fromCurrency === 'KRW' && toCurrency !== 'KRW') {\n      return numAmount / exchangeRateMap[toCurrency]\n    } else if (fromCurrency !== 'KRW' && toCurrency === 'KRW') {\n      return numAmount * exchangeRateMap[fromCurrency]\n    } else if (fromCurrency !== 'KRW' && toCurrency !== 'KRW') {\n      const krwAmount = numAmount * exchangeRateMap[fromCurrency]\n      return krwAmount / exchangeRateMap[toCurrency]\n    }\n    return numAmount\n  }\n\n  const result = convertAmount()\n\n  const handleSwapCurrencies = () => {\n    setFromCurrency(toCurrency)\n    setToCurrency(fromCurrency)\n  }\n\n  const formatNumber = (num: number) => {\n    return num.toLocaleString('ko-KR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })\n  }\n\n  const getCurrencySymbol = (currencyCode: string) => {\n    if (currencyCode === 'KRW') return '₩'\n    const currency = SUPPORTED_CURRENCIES.find(c => c.code === currencyCode)\n    return currency?.symbol || currencyCode\n  }\n\n  const availableCurrencies = ['KRW', ...exchangeRates.map(rate => rate.currency)]\n\n  return (\n    <Card className=\"border-0 shadow-lg bg-white dark:bg-gray-800\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calculator className=\"w-5 h-5\" />\n          환율 계산기\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n              금액\n            </label>\n            <input\n              type=\"number\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"금액을 입력하세요\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n              변환 결과\n            </label>\n            <div className=\"px-3 py-2 bg-gray-50 dark:bg-gray-600 rounded-lg text-lg font-semibold text-gray-900 dark:text-white\">\n              {getCurrencySymbol(toCurrency)}{formatNumber(result)}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex-1\">\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              From\n            </label>\n            <select\n              value={fromCurrency}\n              onChange={(e) => setFromCurrency(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500\"\n            >\n              {availableCurrencies.map((currency) => (\n                <option key={currency} value={currency}>\n                  {currency === 'KRW' ? '🇰🇷 KRW (Korean Won)' : \n                   `${SUPPORTED_CURRENCIES.find(c => c.code === currency)?.flag} ${currency} (${SUPPORTED_CURRENCIES.find(c => c.code === currency)?.name})`}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={handleSwapCurrencies}\n            className=\"mt-6 h-10 w-10 rounded-full\"\n          >\n            <ArrowLeftRight className=\"w-4 h-4\" />\n          </Button>\n\n          <div className=\"flex-1\">\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              To\n            </label>\n            <select\n              value={toCurrency}\n              onChange={(e) => setToCurrency(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500\"\n            >\n              {availableCurrencies.map((currency) => (\n                <option key={currency} value={currency}>\n                  {currency === 'KRW' ? '🇰🇷 KRW (Korean Won)' : \n                   `${SUPPORTED_CURRENCIES.find(c => c.code === currency)?.flag} ${currency} (${SUPPORTED_CURRENCIES.find(c => c.code === currency)?.name})`}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n          실시간 환율 기준으로 계산됩니다. 실제 거래 시 수수료가 추가될 수 있습니다.\n        </div>\n      </CardContent>\n    </Card>\n  )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1240, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/components/dashboard/SettingsPanel.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/Card\";\nimport { Button } from \"@/components/ui/Button\";\nimport { UserSettings, SUPPORTED_CURRENCIES } from \"@/types\";\nimport { Settings, Save } from \"lucide-react\";\n\ninterface SettingsPanelProps {\n  settings: UserSettings;\n  onSettingsChange: (settings: UserSettings) => void;\n  onSave: () => void;\n}\n\nexport function SettingsPanel({\n  settings,\n  onSettingsChange,\n  onSave,\n}: SettingsPanelProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [localSettings, setLocalSettings] = useState<UserSettings>(settings);\n\n  // Prevent body scroll when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n    \n    // Cleanup function to restore scroll when component unmounts\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen]);\n\n  const handleThresholdChange = (value: number) => {\n    const threshold = Math.max(3, value);\n    setLocalSettings((prev) => ({ ...prev, thresholdKRW: threshold }));\n  };\n\n  const handleCurrencyToggle = (currencyCode: string) => {\n    setLocalSettings((prev) => ({\n      ...prev,\n      selectedCurrencies: prev.selectedCurrencies.includes(currencyCode)\n        ? prev.selectedCurrencies.filter((c) => c !== currencyCode)\n        : [...prev.selectedCurrencies, currencyCode],\n    }));\n  };\n\n  const handleChartCurrencyChange = (currencyCode: string) => {\n    setLocalSettings((prev) => ({\n      ...prev,\n      chartCurrency: currencyCode,\n    }));\n  };\n\n  const handleCurrencyAmountChange = (currencyCode: string, amount: number) => {\n    setLocalSettings((prev) => ({\n      ...prev,\n      currencyDisplaySettings: {\n        ...prev.currencyDisplaySettings,\n        [currencyCode]: amount,\n      },\n    }));\n  };\n\n  const handleSave = () => {\n    onSettingsChange(localSettings);\n    onSave();\n    setIsOpen(false);\n  };\n\n  const handleCancel = () => {\n    setLocalSettings(settings);\n    setIsOpen(false);\n  };\n\n  if (!isOpen) {\n    return (\n      <Button\n        variant=\"outline\"\n        size=\"icon\"\n        onClick={() => setIsOpen(true)}\n        className=\"fixed bottom-6 right-6 h-12 w-12 rounded-full shadow-lg cursor-pointer\"\n      >\n        <Settings className=\"w-5 h-5\" />\n      </Button>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black/70 flex items-center justify-center p-4 z-50\">\n      <Card className=\"w-full relative max-w-md h-2/3 border-0 shadow-2xl bg-white dark:bg-gray-800 overflow-y-scroll\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"w-5 h-5\" />\n            Dashboard Settings\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Revalidation Threshold (KRW)\n              </label>\n              <span className=\"font-medium\">\n                {localSettings.thresholdKRW} KRW\n              </span>\n            </div>\n            <div className=\"space-y-2\">\n              <input\n                type=\"range\"\n                min=\"3\"\n                max=\"100\"\n                step=\"1\"\n                value={localSettings.thresholdKRW}\n                onChange={(e) => handleThresholdChange(Number(e.target.value))}\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>3 KRW</span>\n                <span>100 KRW</span>\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Minimum change required to trigger updates\n            </p>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n              Chart Currency\n            </label>\n            <div className=\"grid grid-cols-2 gap-2 mb-6\">\n              {SUPPORTED_CURRENCIES.filter((currency) =>\n                localSettings.selectedCurrencies.includes(currency.code)\n              ).map((currency) => (\n                <button\n                  key={currency.code}\n                  onClick={() => handleChartCurrencyChange(currency.code)}\n                  className={`p-3 rounded-lg border text-left transition-colors ${\n                    localSettings.chartCurrency === currency.code\n                      ? \"border-green-500 bg-green-50 dark:bg-green-950\"\n                      : \"border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800\"\n                  }`}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-lg\">{currency.flag}</span>\n                    <div>\n                      <div className=\"font-medium text-sm\">{currency.code}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {currency.name}\n                      </div>\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n              Chart Display Amount\n            </label>\n            <div className=\"space-y-3 mb-6\">\n              {SUPPORTED_CURRENCIES.filter((currency) =>\n                localSettings.selectedCurrencies.includes(currency.code)\n              ).map((currency) => (\n                <div\n                  key={currency.code}\n                  className=\"flex items-center gap-3 p-3 rounded-lg border border-gray-200 dark:border-gray-700\"\n                >\n                  <span className=\"text-lg\">{currency.flag}</span>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-sm\">{currency.code}</div>\n                    <div className=\"text-xs text-gray-500\">{currency.name}</div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      value={\n                        localSettings.currencyDisplaySettings[currency.code] ||\n                        1\n                      }\n                      onChange={(e) =>\n                        handleCurrencyAmountChange(\n                          currency.code,\n                          parseInt(e.target.value) || 1\n                        )\n                      }\n                      className=\"w-20 px-2 py-1 border border-gray-300 dark:border-gray-600 rounded text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                    />\n                    <span className=\"text-sm\">{currency.code} = ₩</span>\n                    <span className=\"text-sm text-gray-500\">?</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n              Monitored Currencies\n            </label>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {SUPPORTED_CURRENCIES.map((currency) => (\n                <button\n                  key={currency.code}\n                  onClick={() => handleCurrencyToggle(currency.code)}\n                  className={`p-3 rounded-lg border text-left transition-colors ${\n                    localSettings.selectedCurrencies.includes(currency.code)\n                      ? \"border-blue-500 bg-blue-50 dark:bg-blue-950\"\n                      : \"border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800\"\n                  }`}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-lg\">{currency.flag}</span>\n                    <div>\n                      <div className=\"font-medium text-sm\">{currency.code}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {currency.name}\n                      </div>\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex gap-2 sticky bottom-4 right-0 w-full bg-white dark:bg-gray-800\">\n            <Button onClick={handleSave} className=\"flex-1 cursor-pointer\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Settings\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleCancel}\n              className=\"cursor-pointer\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1760, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/components/dashboard/CurrencyDashboard.tsx"],"sourcesContent":["'use client'\n\nimport { useExchangeRates } from '@/hooks/useExchangeRates'\nimport { useUserSettings } from '@/hooks/useUserSettings'\nimport { CurrencyCard } from './CurrencyCard'\nimport { ExchangeRateChart } from './ExchangeRateChart'\nimport { CurrencyConverter } from './CurrencyConverter'\nimport { SettingsPanel } from './SettingsPanel'\nimport { SUPPORTED_CURRENCIES } from '@/types'\nimport { Wifi, WifiOff, AlertCircle } from 'lucide-react'\n\nexport function CurrencyDashboard() {\n  const { settings, updateSettings, saveSettings } = useUserSettings()\n  const { exchangeRates, chartData, isConnected, error } = useExchangeRates({\n    selectedCurrencies: settings.selectedCurrencies,\n    thresholdKRW: settings.thresholdKRW,\n  })\n\n  const filteredExchangeRates = exchangeRates.filter(rate =>\n    settings.selectedCurrencies.includes(rate.currency)\n  )\n\n\n  const foreignAmount = settings.currencyDisplaySettings[settings.chartCurrency] || 1\n\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              환율 대시보드\n            </h1>\n            <div className=\"flex items-center gap-2\">\n              {isConnected ? (\n                <Wifi className=\"w-4 h-4 text-green-500 animate-pulse\" />\n              ) : error ? (\n                <AlertCircle className=\"w-4 h-4 text-red-500\" />\n              ) : (\n                <WifiOff className=\"w-4 h-4 text-gray-400\" />\n              )}\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {isConnected ? '실시간 연결' : error ? '연결 오류' : '연결 끊김'}\n              </span>\n              {error && (\n                <span className=\"text-xs text-red-500 ml-2\">\n                  ({error})\n                </span>\n              )}\n            </div>\n          </div>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            실시간 환율 정보와 차트를 확인하세요\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8\">\n          {filteredExchangeRates.length > 0 ? (\n            filteredExchangeRates.map((rate) => (\n              <CurrencyCard\n                key={rate.currency}\n                exchangeRate={rate}\n              />\n            ))\n          ) : (\n            <div className=\"col-span-full text-center py-12\">\n              <div className=\"text-gray-400 dark:text-gray-600 mb-2\">\n                📊\n              </div>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                {error ? '환율 데이터를 불러올 수 없습니다' : '환율 데이터를 불러오는 중...'}\n              </p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          <ExchangeRateChart\n            currency={settings.chartCurrency}\n            data={chartData}\n            isRealTime={isConnected}\n            foreignAmount={foreignAmount}\n          />\n          <CurrencyConverter exchangeRates={exchangeRates} />\n        </div>\n\n        <SettingsPanel\n          settings={settings}\n          onSettingsChange={updateSettings}\n          onSave={saveSettings}\n        />\n      </div>\n    </div>\n  )\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AATA;;;;;;;;;AAWO,SAAS;IACd,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,CAAA,GAAA,mJAAA,CAAA,kBAAe,AAAD;IACjE,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,oJAAA,CAAA,mBAAgB,AAAD,EAAE;QACxE,oBAAoB,SAAS,kBAAkB;QAC/C,cAAc,SAAS,YAAY;IACrC;IAEA,MAAM,wBAAwB,cAAc,MAAM,CAAC,CAAA,OACjD,SAAS,kBAAkB,CAAC,QAAQ,CAAC,KAAK,QAAQ;IAIpD,MAAM,gBAAgB,SAAS,uBAAuB,CAAC,SAAS,aAAa,CAAC,IAAI;IAGlF,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAG,WAAU;8CAAmD;;;;;;8CAGjE,8OAAC;oCAAI,WAAU;;wCACZ,4BACC,8OAAC,kMAAA,CAAA,OAAI;4CAAC,WAAU;;;;;mDACd,sBACF,8OAAC,oNAAA,CAAA,cAAW;4CAAC,WAAU;;;;;iEAEvB,8OAAC,4MAAA,CAAA,UAAO;4CAAC,WAAU;;;;;;sDAErB,8OAAC;4CAAK,WAAU;sDACb,cAAc,WAAW,QAAQ,UAAU;;;;;;wCAE7C,uBACC,8OAAC;4CAAK,WAAU;;gDAA4B;gDACxC;gDAAM;;;;;;;;;;;;;;;;;;;sCAKhB,8OAAC;4BAAE,WAAU;sCAAmC;;;;;;;;;;;;8BAKlD,8OAAC;oBAAI,WAAU;8BACZ,sBAAsB,MAAM,GAAG,IAC9B,sBAAsB,GAAG,CAAC,CAAC,qBACzB,8OAAC,mKAAA,CAAA,eAAY;4BAEX,cAAc;2BADT,KAAK,QAAQ;;;;kDAKtB,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;0CAAwC;;;;;;0CAGvD,8OAAC;gCAAE,WAAU;0CACV,QAAQ,uBAAuB;;;;;;;;;;;;;;;;;8BAMxC,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,wKAAA,CAAA,oBAAiB;4BAChB,UAAU,SAAS,aAAa;4BAChC,MAAM;4BACN,YAAY;4BACZ,eAAe;;;;;;sCAEjB,8OAAC,wKAAA,CAAA,oBAAiB;4BAAC,eAAe;;;;;;;;;;;;8BAGpC,8OAAC,oKAAA,CAAA,gBAAa;oBACZ,UAAU;oBACV,kBAAkB;oBAClB,QAAQ;;;;;;;;;;;;;;;;;AAKlB","debugId":null}},
    {"offset": {"line": 1966, "column": 0}, "map": {"version":3,"sources":["file:///Users/ulift/Documents/currencyDashboard/apps/frontend/src/app/page.tsx"],"sourcesContent":["'use client'\n\nimport { CurrencyDashboard } from '@/components/dashboard/CurrencyDashboard'\n\nexport default function Home() {\n  return (\n    <main className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Currency Dashboard\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n            Real-time exchange rate monitoring with smart revalidation\n          </p>\n        </div>\n        <CurrencyDashboard />\n      </div>\n    </main>\n  )\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAAmD;;;;;;sCAGjE,8OAAC;4BAAE,WAAU;sCAAwC;;;;;;;;;;;;8BAIvD,8OAAC,wKAAA,CAAA,oBAAiB;;;;;;;;;;;;;;;;AAI1B","debugId":null}}]
}