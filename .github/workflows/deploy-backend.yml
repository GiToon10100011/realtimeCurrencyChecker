name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths: 
      - 'apps/backend/**'
      - 'packages/shared/**'
  workflow_dispatch:

jobs:
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd apps/backend
          npm ci
          
      - name: Run tests
        run: |
          cd apps/backend
          npm test
        env:
          NODE_ENV: test
          
      - name: Build application
        run: |
          cd apps/backend
          npm run build
          
      - name: Deploy to Railway
        uses: railwayapp/railway-deploy-action@v2
        with:
          token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE_ID }}

  deploy-render:
    name: Deploy to Render (Alternative)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && false  # Disabled by default
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Trigger Render Deploy
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

  deploy-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/currency-dashboard-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  deploy-aws:
    name: Deploy to AWS ECS (Alternative)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && false  # Disabled by default
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: currency-dashboard-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd apps/backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --force-new-deployment